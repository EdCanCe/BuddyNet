/**
 * @file Profile.h
 * @author Edmundo Canedo Cervantes - A01645576
 * @brief This file contains the profile class, that manages
 * the user profiles and it's data.
 * @version 0.1
 * @date 2024-09-18
 * 
 */
#ifndef PROFILE_H
#define PROFILE_H

#include <iostream>
#include "Date.h"
#include "Structures.h"
#define ll long long int

class Post; //Forward declaration
class Notification; //Forward declaration

/**
 * @class Profile
 * 
 * @brief This class has the profile's main data and
 * contains methods to set and get that data.
 * 
 */
class Profile{
    //Declaration of private attributes.
    private:
        ll id; //Unique ID that will be generated by an auto increment. It's used to acces a Profile.
        std::string name; //User's name containing first and last name.
        std::string username; //Unique user's username.
        std::string password; //User's password used to access the system.
        std::string description; //User's profile description.
        Date birth; //User's birth date.
        Stack<Notification*> notifications; //User's notifications (may be other profiles or a post).

    //Declaration of public methods.
    public:
        Profile(ll, std::string, std::string, std::string, std::string, int, int, int);
        ll getId();
        std::string getName();
        std::string getUsername();
        std::string getDescription();
        Date& getBirth();
        Stack<Notification*>& getNotifications();
        bool validatePassword(std::string Password);
        void setName(std::string);
        void setUsername(std::string);
        void setPassword(std::string);
        void setDescription(std::string);
};

/**
 * @brief Constructs a new Profile Object by entering all of
 * it's data.
 * 
 * @param Id User's unique ID.
 * @param Name User's full name.
 * @param Username User's unique username.
 * @param Password User's password to access the system.
 * @param Description User's profile description.
 * @param year User's year of birth (19XX-20XX).
 * @param month User's month of birth (1-12).
 * @param day User's day of birth (1-31).
 */
Profile::Profile(ll Id, std::string Name, std::string Username, std::string Password, std::string Description, int year, int month, int day){
    id=Id;
    name=Name;
    username=Username;
    password=Password;
    description=Description;
    birth=Date(year, month, day);
}

/**
 * @brief Returns the user's ID.
 * 
 * @return long long int - User's unique ID.
 */
ll Profile::getId(){
    return id;
}

/**
 * @brief Returns the user's full name.
 * 
 * @return std::string - User's full name.
 */
std::string Profile::getName(){
    return name;
}

/**
 * @brief Returns the user's username.
 * 
 * @return std::string - User's username.
 */
std::string Profile::getUsername(){
    return username;
}

/**
 * @brief Returns the user's profile description.
 * 
 * @return std::string - User's description.
 */
std::string Profile::getDescription(){
    return description;
}

/**
 * @brief Returns the user's birth date.
 * 
 * @return Date& - The user's birth date.
 */
Date& Profile::getBirth(){
    return birth;
}

/**
 * @brief Returns the stack containing the user's
 * notifications.
 * 
 * @return Stack<std::string>& - The user's notifications.
 */
Stack<Notification*>& Profile::getNotifications(){
    return notifications;
}

/**
 * @brief Verifies that the user's password matches the one
 * given as parameter.
 * 
 * @param Password The string that will be compared to the user's
 * password.
 * @return TRUE if the passwords are the same. FALSE if The passwords are different.
 */
bool Profile::validatePassword(std::string Password){
    return password==Password;
}

/**
 * @brief Changes the user's full name.
 * 
 * @param Name The new user's full name.
 */
void Profile::setName(std::string Name){
    name=Name;
}

/**
 * @brief Changes the user's username.
 * 
 * @param Username The new user's username.
 */
void Profile::setUsername(std::string Username){
    username=Username;
}


/**
 * @brief Changes the user's password.
 * 
 * @param Username The new user's password.
 */
void Profile::setPassword(std::string Password){
    password=Password;
}

/**
 * @brief Changes the user's description.
 * 
 * @param Username The new user's description.
 */
void Profile::setDescription(std::string Description){
    description=Description;
}

#endif