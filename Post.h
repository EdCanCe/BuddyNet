/**
 * @file Post.h
 * @author Edmundo Canedo Cervantes - A01645576
 * @brief This file contains the Post class, that manages
 * the posts data.
 * @version 0.1
 * @date 2024-09-18
 * 
 */
#ifndef POST_H
#define POST_H

#include <iostream>
#include "Profile.h"
#include "Date.h"
#include "Screen.h"
#include "Structures.h"
#define ll long long int

/**
 * @class Post
 * 
 * @brief This class contains all of the post's data, also
 * contains methods to manage them.
 * 
 */
class Post{
    //Declaration of private attributes.
    private:
        ll id; //Unique ID that will be generated by an auto increment. It's used to access a post.
        Profile* author; //Pointer that references the author of the post.
        std::string text; //The text that the post posseses.
        Date date; //The date where the post was written.
        Post* fatherPost = nullptr; //Father post in case it's a comment.
        vector<ll> upvotes; //Stores the ID of the profiles have upvoted the post.
        vector<ll> downvotes; //Stores the ID of the profiles have downvoted the post.

    //Declaration of public attributes.
    public:
        Post(ll, Profile&, std::string);
        Post(ll, Profile&, std::string, Post&);
        Post(ll, Profile&, vector<ll>&, vector<ll>&, std::string);
        Post(ll, Profile&, vector<ll>&, vector<ll>&, std::string, Post&);
        ll getId();
        Profile& getAuthor();
        std::string getText();
        Date& getDate();
        ll getVotes();
        bool upvote(Profile*);
        bool downvote(Profile*);
        void print();
        void printDB();
};

/**
 * @brief Constructs a new Post Object.
 * This constructor is used for a new post that's not a comment.
 * 
 * @param Id The unique ID of the Post.
 * @param Author The Author of the post.
 * @param Text The content of the post.
 */
Post::Post(ll Id, Profile& Author, std::string Text){
    id=Id;
    author=&Author;
    text=Text;
    date=Date();
    
}

/**
 * @brief Constructs a new Post Object.
 * This constructor is used for a new post that is a comment.
 * 
 * @param Id The unique ID of the Post.
 * @param Author The Author of the post.
 * @param Text The content of the post.
 * @param FatherPost The post this is a comment on.
 */
Post::Post(ll Id, Profile& Author, std::string Text, Post& FatherPost){
    id=Id;
    author=&Author;
    text=Text;
    date=Date();
    fatherPost=&FatherPost;
}


/**
 * @brief Constructs a new Post Object.
 * This constructor is used to load a post from
 * the database that's not a comment.
 * 
 * @param Id The unique ID of the Post.
 * @param Author The Author of the post.
 * @param Upvotes The ID of the profiles that upvoted the post.
 * @param Downvotes The ID of the profiles that downvoted the post.
 * @param Text The content of the post.
 */
Post::Post(ll Id, Profile& Author, vector<ll>& Upvotes, vector<ll>& Downvotes, std::string Text){
    id=Id;
    author=&Author;
    upvotes=Upvotes;
    downvotes=Downvotes;
    text=Text;
    date=Date();
}

/**
 * @brief Constructs a new Post Object.
 * This constructor is used to load a post from
 * the database that is a comment.
 * 
 * @param Id The unique ID of the Post.
 * @param Author The Author of the post.
 * @param Upvotes The ID of the profiles that upvoted the post.
 * @param Downvotes The ID of the profiles that downvoted the post.
 * @param Text The content of the post.
 * @param FatherPost The post this is a comment on.
 */
Post::Post(ll Id, Profile& Author, vector<ll>& Upvotes, vector<ll>& Downvotes, std::string Text, Post& FatherPost){
    id=Id;
    author=&Author;
    upvotes=Upvotes;
    downvotes=Downvotes;
    text=Text;
    date=Date();
}

/**
 * @brief Returns the ID of the post.
 * 
 * @return ll - The ID of the post.
 */
ll Post::getId(){
    return id;
}

/**
 * @brief Returns the author of the post.
 * 
 * @return Profile& - The author of the post as a profile.
 */
Profile& Post::getAuthor(){
    return *author;
}

/**
 * @brief Returns the content of the post.
 * 
 * @return std::string - The content of the post.
 */
std::string Post::getText(){
    return text;
}

/**
 * @brief Returns the date the post was written.
 * 
 * @return Date& - The date the post was written.
 */
Date& Post::getDate(){
    return date;
}

/**
 * @brief Returns the total sum of votes the post has.
 * 
 * @return ll - The number of votes.
 */
ll Post::getVotes(){
    ll size=upvotes.size()-downvotes.size();
    return size;
}

bool Post::upvote(Profile*){
    return false;
}

bool Post::downvote(Profile*){
    return false;
}

/**
 * @brief Prints the post in the console.
 */
void Post::print(){
    ll votes=getVotes();
    int width=screen.getWidth();
    int fh=(width-1)/2;
    int sh=width-fh-1;
    for(int i=0; i<fh; i++){
        std::cout<<screen.text.style.bold(screen.text.color.green("═"));
    }
    std::cout<<screen.text.style.bold(screen.text.color.green("╩"));
    for(int i=0; i<sh; i++){
        std::cout<<screen.text.style.bold(screen.text.color.green("═"));
    }

    std::cout<<"\n";

    std::cout<<screen.center(author->getName())<<"\n";
    std::cout<<screen.center("@"+author->getUsername())<<"\n";
    std::cout<<screen.center(screen.text.color.red(input.getString(downvotes.size())+" ↓")+" | "+date.toText()+" | "+screen.text.color.green("↑ "+input.getString(upvotes.size())))<<"\n";
    std::cout<<screen.center(screen.text.style.bold("ID: "+input.getString(id)))<<"\n";

    for(int i=0; i<width; i++){
        std::cout<<screen.text.color.green("─");
    }
    std::cout<<"\n";

    std::cout<<screen.center(text);

    std::cout<<"\n";
    for(int i=0; i<fh; i++){
        std::cout<<screen.text.style.bold(screen.text.color.green("═"));
    }
    std::cout<<screen.text.style.bold(screen.text.color.green("╦"));
    for(int i=0; i<sh; i++){
        std::cout<<screen.text.style.bold(screen.text.color.green("═"));
    }
}

#endif